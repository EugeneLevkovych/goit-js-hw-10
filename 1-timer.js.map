{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst dateTimePicker = document.querySelector('#datetime-picker');\nconst startButton = document.querySelector('[data-start]');\nconst daysEl = document.querySelector('[data-days]');\nconst hoursEl = document.querySelector('[data-hours]');\nconst minutesEl = document.querySelector('[data-minutes]');\nconst secondsEl = document.querySelector('[data-seconds]');\n\n// Змінна для збереження обраної дати\nlet userSelectedDate = null;\nlet timerInterval = null;\n\nstartButton.disabled = true;\n\n// Flatpickr\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    userSelectedDate = selectedDates[0];\n    if (userSelectedDate <= new Date()) {\n      startButton.disabled = true;\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n      });\n    } else {\n      startButton.disabled = false;\n      iziToast.success({ title: 'Success', message: 'Valid date selected!' });\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nfunction updateTimerInterface({ days, hours, minutes, seconds }) {\n  daysEl.textContent = addLeadingZero(days);\n  hoursEl.textContent = addLeadingZero(hours);\n  minutesEl.textContent = addLeadingZero(minutes);\n  secondsEl.textContent = addLeadingZero(seconds);\n}\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nstartButton.addEventListener('click', () => {\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const currentTime = new Date();\n    const timeRemaining = userSelectedDate - currentTime;\n\n    if (timeRemaining <= 0) {\n      clearInterval(timerInterval);\n      updateTimerInterface({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      iziToast.success({ title: 'Timer', message: 'Time is up!' });\n      dateTimePicker.disabled = false;\n      return;\n    }\n\n    const timeComponents = convertMs(timeRemaining);\n    updateTimerInterface(timeComponents);\n  }, 1000);\n});\n\nstartButton.disabled = true;\n// console.dir(startButton);\n//--------------------------------REPIN-TIMER----------------------------------------\n// const timer = {\n//   deadLine: new Date('2025-01-09T20:53:00'),\n//   intervalId: null,\n//   elements: {\n//     days: document.querySelector('[data-days]'),\n//     hours: document.querySelector('[data-hours]'),\n//     minutes: document.querySelector('[data-minutes]'),\n//     seconds: document.querySelector('[data-seconds]'),\n//   },\n//   start() {\n//     this.intervalId = setInterval(() => {\n//       const diff = this.deadLine - Date.now();\n\n//       if (diff <= 0) {\n//         this.stop();\n//         return;\n//       }\n\n//       const timeComponents = this.getTimeComponents(diff);\n//       this.elements.days.textContent = this.pad(timeComponents.days);\n//       this.elements.hours.textContent = this.pad(timeComponents.hours);\n//       this.elements.minutes.textContent = this.pad(timeComponents.minutes);\n//       this.elements.seconds.textContent = this.pad(timeComponents.seconds);\n//     }, 1000);\n//   },\n//   stop() {\n//     clearInterval(this.intervalId);\n//   },\n//   getTimeComponents(diff) {\n//     const days = Math.floor(diff / 1000 / 60 / 60 / 24);\n//     const hours = Math.floor((diff / 1000 / 60 / 60) % 24);\n//     const minutes = Math.floor((diff / 1000 / 60) % 60);\n//     const seconds = Math.floor((diff / 1000) % 60);\n//     return {\n//       days,\n//       hours,\n//       minutes,\n//       seconds,\n//     };\n//   },\n//   pad(value) {\n//     return String(value).padStart(2, '0');\n//   },\n// };\n// timer.start();\n\n// document.addEventListener('click', () => {\n//   timer.stop();\n// });\n"],"names":["dateTimePicker","startButton","daysEl","hoursEl","minutesEl","secondsEl","userSelectedDate","timerInterval","options","selectedDates","iziToast","flatpickr","addLeadingZero","value","updateTimerInterface","days","hours","minutes","seconds","convertMs","ms","timeRemaining","timeComponents"],"mappings":"+IAKA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAS,SAAS,cAAc,aAAa,EAC7CC,EAAU,SAAS,cAAc,cAAc,EAC/CC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAY,SAAS,cAAc,gBAAgB,EAGzD,IAAIC,EAAmB,KACnBC,EAAgB,KAEpBN,EAAY,SAAW,GAGvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBH,EAAmBG,EAAc,CAAC,EAC9BH,GAAoB,IAAI,MAC1BL,EAAY,SAAW,GACvBS,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,IAEDT,EAAY,SAAW,GACvBS,EAAS,QAAQ,CAAE,MAAO,UAAW,QAAS,sBAAsB,CAAE,EAEzE,CACH,EAEAC,EAAUX,EAAgBQ,CAAO,EAEjC,SAASI,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEA,SAASC,EAAqB,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC/DhB,EAAO,YAAcU,EAAeG,CAAI,EACxCZ,EAAQ,YAAcS,EAAeI,CAAK,EAC1CZ,EAAU,YAAcQ,EAAeK,CAAO,EAC9CZ,EAAU,YAAcO,EAAeM,CAAO,CAChD,CAEA,SAASC,EAAUC,EAAI,CAMrB,MAAML,EAAO,KAAK,MAAMK,EAAK,KAAG,EAC1BJ,EAAQ,KAAK,MAAOI,EAAK,MAAO,IAAI,EACpCH,EAAU,KAAK,MAAQG,EAAK,MAAO,KAAQ,GAAM,EACjDF,EAAU,KAAK,MAASE,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAL,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEAjB,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BO,EAAgB,YAAY,IAAM,CAEhC,MAAMc,EAAgBf,EADF,IAAI,KAGxB,GAAIe,GAAiB,EAAG,CACtB,cAAcd,CAAa,EAC3BO,EAAqB,CAAE,KAAM,EAAG,MAAO,EAAG,QAAS,EAAG,QAAS,CAAC,CAAE,EAClEJ,EAAS,QAAQ,CAAE,MAAO,QAAS,QAAS,aAAa,CAAE,EAC3DV,EAAe,SAAW,GAC1B,MACD,CAED,MAAMsB,EAAiBH,EAAUE,CAAa,EAC9CP,EAAqBQ,CAAc,CACpC,EAAE,GAAI,CACT,CAAC,EAEDrB,EAAY,SAAW"}